<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Illusory stillness]]></title>
  <link href="http://crowding.github.io/atom.xml" rel="self"/>
  <link href="http://crowding.github.io/"/>
  <updated>2014-06-10T23:07:57-07:00</updated>
  <id>http://crowding.github.io/</id>
  <author>
    <name><![CDATA[Peter Meilstrup]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iTunes Library Manipulation With Python]]></title>
    <link href="http://crowding.github.io/blog/2014/05/21/itunes-library-manipulation-with-python/"/>
    <updated>2014-05-21T12:13:36-07:00</updated>
    <id>http://crowding.github.io/blog/2014/05/21/itunes-library-manipulation-with-python</id>
    <content type="html"><![CDATA[<p>Current project: filter out duplicates and CDs with missing tracks from library.</p>

<p>Using: Python/appscript.</p>

<p>Er, first upgrading my Python/IPython?</p>

<p>I followed <a href="http://stupidpythonideas.blogspot.com/2013/02/installing-scipy-etc-for-python-3-on-mac.html">these instructions</a>.</p>

<p>Except that instead of <code>easy_install3.4 readline</code> do <code>pip3 install gnureadline</code>.</p>

<p>And install an old gfortran? I get zombie errors referring to a nonexistent version of homebrew&rsquo;s gfortran.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install python3
</span><span class='line'>pip install --upgrade pip
</span><span class='line'>pip install ipython[notebook]</span></code></pre></td></tr></table></div></figure>


<p>Dammit I just install a binary numpy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whitespace-mode]]></title>
    <link href="http://crowding.github.io/blog/2014/05/19/whitespace-mode/"/>
    <updated>2014-05-19T21:00:35-07:00</updated>
    <id>http://crowding.github.io/blog/2014/05/19/whitespace-mode</id>
    <content type="html"><![CDATA[<p>Why does whitespace-mode fuck up longlines mode when it&rsquo;s supposed to be disabled?</p>

<p>I&rsquo;d like to edit markdown files with longlines-mode (word wrapping). Clearly when longlines-mode is enabled, I don&rsquo;t want to highlight 80+ char lines, as I_do when editing code. However, I still want the other whitespace-mode features (highlight trailing spaces, tabs, etc)</p>

<p>I have, in my markdown-mode modehook:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  (when whitespace-mode
</span><span class='line'>    (whitespace-mode 'disable)
</span><span class='line'>    (setq-local whitespace-style (remove 'lines-tail whitespace-style)))</span></code></pre></td></tr></table></div></figure>


<p>It doesn&rsquo;t work. Lines longer than 80char still get highlighted.</p>

<p>But indeed &lsquo;lines-tail does not appear in whitespace-style. However, too late: this came after whitespace-mode had initialized, and so it&rsquo;s already set up.</p>

<p>Moving to a lighlighted char and doing <code>(face-at-point)</code> reveals <code>whitespace-line</code>.</p>

<p>Disabling font-lock-mode disables all highlighting.</p>

<p><code>font-lock-fontify-buffer</code> doesn&rsquo;t do it.</p>

<p><code>font-lock-keywords-alist</code> does not contain anything pertaining to whitespace-mode.</p>

<p>Hmmm. maybe I can locally redefine the face.</p>

<p><code>font-lock-keywords</code> is not buffer local. It contains this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>("^\\([^ \n]\\{4\\}\\|[^ \n]\\{0,3\\}    \\)\\{20\\}\\(.+\\)$"
</span><span class='line'>(2 whitespace-line t))</span></code></pre></td></tr></table></div></figure>


<p>If I remove <code>lines-tail</code> f rom <code>whitespace-style</code> before loading the buffer&hellip; the offending highlighting does not take place.</p>

<p>So I need to to the remove before enabling whitespace mode? and make it buffer-local?</p>

<p>So, I made sure that the modification to whitespace-style occurred before whitespace-mode was enabled. That did the trick, I think.</p>

<p>So, here:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(add-hook 'markdown-mode-hook 'pbm-markdown-fonts)
</span><span class='line'>
</span><span class='line'>(defun pbm-markdown-fonts ()
</span><span class='line'>  ;Use variable pitch fonts, and wrap long lines.
</span><span class='line'>  (variable-pitch-mode t)
</span><span class='line'>  (if whitespace-mode
</span><span class='line'>      (error "markdown mode needs configured before whitespace mode is enabled"))
</span><span class='line'>  (setq-local whitespace-style (remove 'lines-tail whitespace-style))
</span><span class='line'>  (visual-line-mode)
</span><span class='line'>  (set-visual-wrap-column 75)
</span><span class='line'>  (font-lock-fontify-buffer))</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time Shifting an Internet Stream With VLC]]></title>
    <link href="http://crowding.github.io/blog/2014/05/15/time-shifting-an-internet-stream/"/>
    <updated>2014-05-15T17:31:07-07:00</updated>
    <id>http://crowding.github.io/blog/2014/05/15/time-shifting-an-internet-stream</id>
    <content type="html"><![CDATA[<p>I want to listen to this <a href="http://www.brap.fm/2014/05/14/the-shiso-room-yppah-guest-mix-16-05-14/">upcoming show</a> but don&rsquo;t know if it&rsquo;ll be downloadable later.</p>

<p>I worked out a VLC command line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Applications/VLC.app/Contents/MacOS/VLC \
</span><span class='line'>http://delicious.wavestreamer.com:4626/listen.pls?sid=1 \
</span><span class='line'>    vlc://quit \
</span><span class='line'>    --network-caching=10000 \
</span><span class='line'>    --sout /Users/peter/2014-05-16_yppah_shisho_room_mix.ogg \
</span><span class='line'>    --run-time=7400 \
</span><span class='line'>    --intf rc</span></code></pre></td></tr></table></div></figure>


<p>I put the command in an executable <code>.sh</code> file and scheduled it to run using LaunchControl.</p>

<h3>huh?</h3>

<p>Note that I mistakenly tried to actually read the documentation and used</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--sout "#standard{access=file,mux=ogg,dst=/Users/peter/2014-05-16_yppah_shisho_room_mix.ogg}"</span></code></pre></td></tr></table></div></figure>


<p>I don&rsquo;t know what&rsquo;s srong or missing about this, but VLC decided to treat it as a filename instead of the syntax in the <a href="http://www.videolan.org/doc/streaming-howto/en/ch03.html">docs</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[0x109c21840] filesystem access error: cannot open file /Users/peter/blog/#standard{access=file,mux=ogg,dst=/Users/peter/2014-05-16_yppah_shisho_room_mix.ogg} (No such file or directory)</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Online Help in Homebrew Erlang/Emacs/Distel]]></title>
    <link href="http://crowding.github.io/blog/2014/05/05/setting-up-online-help-in-erlang-slash-emacs-slash-distel/"/>
    <updated>2014-05-05T18:14:41-07:00</updated>
    <id>http://crowding.github.io/blog/2014/05/05/setting-up-online-help-in-erlang-slash-emacs-slash-distel</id>
    <content type="html"><![CDATA[<p>Now IN THEORY, Distel-mode is supposed to show me the online help when I point by cursor at a function name and press <code>C-c C-d h</code>. What I actually get is:</p>

<p>I am unable to Google up a description of how to let Distel know where the HTML documentaiton is (as I installed Erlang from Homebrew, I find the HTML docs under <code>/usr/local/Cellar/erlang/17.0/share/doc/erlang/doc/</code>.)</p>

<p>Now looking in what <code>distel.el</code> actually does with a <code>C-c C-d h</code> I find that Distel contains a module <code>otp_doc</code> which is a singleton <code>gen_server</code>&hellip; so I go to an erlang shell on that node and type</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(emacs@dekkera)3&gt; whereis(otp_doc).
</span><span class='line'>&lt;0.44.0&gt;</span></code></pre></td></tr></table></div></figure>


<p>Now I also saw that the <code>otp_doc</code> module had a property list as the init of its <code>gen_server</code> state. The state contained a <code>root_dir</code> variable. The root_dir variable is initialized to a default of <code>code:root_dir()</code>, which is currently set to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(emacs@dekkera)4&gt; code:root_dir().
</span><span class='line'>"/usr/local/Cellar/erlang/17.0/lib/erlang"</span></code></pre></td></tr></table></div></figure>


<p>Aping Distel and calling otp_doc does:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(emacs@dekkera)9&gt; otp_doc:distel(link, "orddict", "find", 2).
</span><span class='line'>no_html</span></code></pre></td></tr></table></div></figure>


<p>Meanwhile, another Distel function <code>C-c C-d A</code> which is bound to <code>erl-show-arglist</code>  works fine when pressed ad <code>orddict:find|</code>. And <code>C-c C-d d</code> also comes up with useful information &mdash; but this information doesn&rsquo;t look like /documentation/.</p>

<p>From Emacs. <code>C-c C-d h</code> does <code>(erl-do-find-doc 'link 'point 'code</code>root_dir 0)`,</p>

<p>And it looks like <code>init()</code> calls <code>index_html()</code> the <code>no_html</code> is coming from <code>init()</code> I guess. Here&rsquo;s how:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>html_index(file,Dir) -&gt;
</span><span class='line'>  FN = filename:join([Dir,"doc","man_index.html"]),
</span><span class='line'>  fold_file(curry(fun lines/3,Dir),[],FN).</span></code></pre></td></tr></table></div></figure>


<p>So do I need to set root_dir to <code>/usr/local/Cellar/erlang/17.0/share/erlang</code>? Or alter how otp_doc is being initialized? Looks like it is accessed through <code>otp_doc:start</code>.</p>

<p>So how to provide the start state from Emacs?</p>

<p>I can&rsquo;t find where this value is configured, anywhere.</p>

<p>So I just crapped out and made a symlink:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dekkera:lib peter$ cd /usr/local/Cellar/erlang/17.0/lib/erlang
</span><span class='line'>dekkera:lib peter$ ln -s ../../share/doc/erlang/doc doc</span></code></pre></td></tr></table></div></figure>


<p>This got rid of no_html error but I still don&rsquo;t find any HTML documentation! What the hell.  I&rsquo;ll have to see why it&rsquo;s not reading the HTML file and populating the ETS database, or something.</p>

<p>This is more debugging of Erlang than I can handle when all I&rsquo;m trying to do is write Erlang code. Argh.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un-pause Programs in OS X]]></title>
    <link href="http://crowding.github.io/blog/2014/04/28/un-pause-programs-in-os-x/"/>
    <updated>2014-04-28T12:43:01-07:00</updated>
    <id>http://crowding.github.io/blog/2014/04/28/un-pause-programs-in-os-x</id>
    <content type="html"><![CDATA[<p>I&rsquo;m not sure why there isn&rsquo;t a builtin way to do this. When a process eats all memory on OS X, it starts &ldquo;pausing&rdquo; applications. Upon killing the offending app, one wants to un-pause all the apps. But if you close the dialog, you can&rsquo;t resume!</p>

<p>I can &ldquo;resume&rdquo; like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pgrep Chrome | xargs kill -CONT</span></code></pre></td></tr></table></div></figure>


<p>which appears to make the apps usable again but the processes still show up as &ldquo;paused&rdquo; in the force quit dialog. Also, I think the unpausing should respect the process tree (not process names.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Actually Create a Bootable Linux USB Key for Mac]]></title>
    <link href="http://crowding.github.io/blog/2014/04/26/actually-create-a-bootable-linux-usb-key-for-mac/"/>
    <updated>2014-04-26T12:32:28-07:00</updated>
    <id>http://crowding.github.io/blog/2014/04/26/actually-create-a-bootable-linux-usb-key-for-mac</id>
    <content type="html"><![CDATA[<p>I wanted to install Linux on a partition on an older (2008) Macbook Pro. It has no working CD drive. In fact having no CD drive is an accelerating trend these days.</p>

<p>Now the Ubuntu site has <a href="http://www.ubuntu.com/download/desktop/create-a-usb-stick-on-mac-osx">instructions</a> for making a bootable USB stick. These instructions don&rsquo;t work on my machine. Nonetheless [contrary to some reports], it is completely possible to boot EFI machines off a USB stick. For example, just imaging the OS X installer DVD to a USB key using Disk Utility results in a bootable key. So something is not right with the Ubuntu image or instructions.</p>

<p><a href="http://sevenbits.github.io/Mac-Linux-USB-Loader/">this did not work</a>
<a href="http://penguintosh.com/about/">this did not even run</a>
<a href="http://tillmail.de/wordpress/436">this did not work at first either</a> (even the special boot loader)
installing <a href="">rEFIt</a> gave no boot menu.</p>

<p>So here are directions that actually work.</p>

<p>Install rEFIt, but then I ran the <code>enable_always.sh</code> command, and I finally saw a boot menu on startup, and it detected the EFI file on the USB stick.</p>

<p>However, the <code>bootX64.efi</code> file showed a &ldquo;not compatible&rdquo; error when I tried to boot it. Using the 32-bit bootIA32.efi worked, and got me into a GRUB prompt.</p>

<p>From the GRUB prempt, I typed,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls
</span><span class='line'>ls (hd0,msdos1)
</span><span class='line'>ls (hd0,msdos1)/efi/boot
</span><span class='line'>ls (hd0,msdos1)/efi/boot/&lt;name of my .iso&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Er, no, it looks like I can&rsquo;t actually make this boot an .iso image from the command line. (and the other &ldquo;Linux USB Creator&rdquo; apps installed boot.efi files that gave &ldquo;unsupported&rdquo; errors. So the thing to do is to extract the contents of the .iso and see if GRUB works that way.</p>

<p>Is it possible to create a bootable Linux key without rEFIt on the main drive? Maybe by putting rEFIt in the key. Not sure though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiling a Raspberry Pi Kernel via Ubuntu]]></title>
    <link href="http://crowding.github.io/blog/2014/04/16/compiling-a-raspberry-pi-kernel-via-ubuntu/"/>
    <updated>2014-04-16T12:42:41-07:00</updated>
    <id>http://crowding.github.io/blog/2014/04/16/compiling-a-raspberry-pi-kernel-via-ubuntu</id>
    <content type="html"><![CDATA[<p><a href="2014-04-15-compiling-a-raspberry-pi-kernel-on-osx">Previously</a>, I set up a crosstools-NG build environment on OSX and then tried to compile a kernel. The kernel compilation process was a bit much to adjust to. Easier to just install Ubuntu in a VirtualBox image and do compilation there.</p>

<p>After installing Ubuntu on the image, I did (mostly via <a href="http://raspberrypi.stackexchange.com/questions/192/how-do-i-cross-compile-the-kernel-on-a-ubuntu-host">this stackexchange answer</a>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install git ncurses-dev make gcc-arm-linux-gnueabi</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/petli/linux.git -b rpi-3.10-usb-sound-backport raspi-linux</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd raspi-linux
</span><span class='line'>ssh pi@raspberrypi.local zcat /proc/config.gz &gt; .config</span></code></pre></td></tr></table></div></figure>


<p>Note that I had to set VirtualBox to &ldquo;bridged adapter&rdquo; mode in order to see the &lsquo;local&rsquo; devices on the network.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=arm CROSS_COMPILE=/usr/bin/arm-linux-gnueabi- oldconfig</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=arm CROSS_COMPILE=/usr/bin/arm-linux-gnueabi- menuconfig</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=arm CROSS_COMPILE=/usr/bin/arm-linux-gnueabi- -j8
</span><span class='line'>make ARCH=arm CROSS_COMPILE=/usr/bin/arm-linux-gnueabi- modules -j8</span></code></pre></td></tr></table></div></figure>


<p>NB. I configured VirtualBox to see as 8 cores for <code>-jN</code> to produce a speedup.</p>

<p>That&hellip;. was straightforward.</p>

<p>Now to install it on the Pi. I&rsquo;ll just take my SD card and mount it on the Ubuntu host for this. This required installing the VirtualBox Extension Pack. And using a USB SD card reader since I couldn&rsquo;t figure out how to work the Mac&rsquo;s builtin reader in VirtualBox.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mv /media/BOOT/kernel.img /media/BOOT/kernel_old.img
</span><span class='line'>cp arch/arm/boot/Image /media/BOOT/kernel.img
</span><span class='line'>make ARCH=arm CROSS_COMPILE=/usr/bin/arm-linux-gnueabi-  INSTALL_MOD_PATH=~/modules modules_install
</span><span class='line'>sudo cp -r ~/modules/lib/* /media/root/lib/</span></code></pre></td></tr></table></div></figure>


<p>Upon booting I got some errors about &ldquo;<code>disagrees about version of symbol module_layout</code>&rdquo;. This made no sense, as modinfo showed the same version as <code>uname -a</code>, but then I added <code>gcc</code> to the <code>make-modules-install</code> option (this had previously ended in &ldquo;<code>-</code>&rdquo; like I would have expected), and made sure all modules were owned and writable only by root. That combination appeared to work (I was less than scientific in doing both at once.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiling a Raspberry Pi Kernel via Ubuntu]]></title>
    <link href="http://crowding.github.io/blog/2014/04/16/compiling-a-raspberry-pi-kernel-via-ubuntu/"/>
    <updated>2014-04-16T00:00:00-07:00</updated>
    <id>http://crowding.github.io/blog/2014/04/16/compiling-a-raspberry-pi-kernel-via-ubuntu</id>
    <content type="html"><![CDATA[<table>
<tbody>
<tr class="odd">
<td align="left">layout: post</td>
</tr>
<tr class="even">
<td align="left">title: &quot;Compiling a Raspberry Pi Kernel via Ubuntu&quot;</td>
</tr>
<tr class="odd">
<td align="left">date: 2014-04-16 12:42:41 -0700</td>
</tr>
<tr class="even">
<td align="left">comments: true</td>
</tr>
<tr class="odd">
<td align="left">categories:</td>
</tr>
</tbody>
</table>
<p><a href="2014-04-15-compiling-a-raspberry-pi-kernel-on-osx">Previously</a>, I set up a crosstools-NG build environment on OSX and then tried to compile a kernel. The kernel compilation process was a bit much to adjust to. Easier to just install Ubuntu in a VirtualBox image and do compilation there.</p>
<p>After installing Ubuntu on the image, I did (mostly via <a href="http://raspberrypi.stackexchange.com/questions/192/how-do-i-cross-compile-the-kernel-on-a-ubuntu-host">this stackexchange answer</a>):</p>
<pre><code>sudo apt-get install git ncurses-dev make gcc-arm-linux-gnueabi</code></pre>
<pre><code>git clone https://github.com/petli/linux.git -b rpi-3.10-usb-sound-backport raspi-linux</code></pre>
<pre><code>cd raspi-linux
ssh pi@raspberrypi.local zcat /proc/config.gz &gt; .config</code></pre>
<p>Note that I had to set VirtualBox to &quot;bridged adapter&quot; mode in order to see the &#8216;local&#8217; devices on the network.</p>
<pre><code>make ARCH=arm CROSS_COMPILE=/usr/bin/arm-linux-gnueabi- oldconfig</code></pre>
<pre><code>make ARCH=arm CROSS_COMPILE=/usr/bin/arm-linux-gnueabi- menuconfig</code></pre>
<pre><code>make ARCH=arm CROSS_COMPILE=/usr/bin/arm-linux-gnueabi- -j8
make ARCH=arm CROSS_COMPILE=/usr/bin/arm-linux-gnueabi- modules -j8</code></pre>
<p>NB. I configured VirtualBox to see as 8 cores for <code>-jN</code> to produce a speedup.</p>
<p>That&#8230;. was straightforward.</p>
<p>Now to install it on the Pi. I&#8217;ll just take my SD card and mount it on the Ubuntu host for this. This required installing the VirtualBox Extension Pack. And using a USB SD card reader since I couldn&#8217;t figure out how to work the Mac&#8217;s builtin reader in VirtualBox.</p>
<pre><code>mv /media/BOOT/kernel.img /media/BOOT/kernel_old.img
cp arch/arm/boot/Image /media/BOOT/kernel.img
make ARCH=arm CROSS_COMPILE=/usr/bin/arm-linux-gnueabi-  INSTALL_MOD_PATH=~/modules modules_install
sudo cp -r ~/modules/lib/* /media/root/lib/</code></pre>
<p>Upon booting I got some errors about &quot;<code>disagrees about version of symbol module_layout</code>&quot;. This made no sense, as modinfo showed the same version as <code>uname -a</code>, but then I added <code>gcc</code> to the <code>make-modules-install</code> option (this had previously ended in &quot;<code>-</code>&quot; like I would have expected), and made sure all modules were owned and writable only by root. That combination appeared to work (I was less than scientific in doing both at once.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Not) Compiling a Raspberry Pi Kernel on OSX]]></title>
    <link href="http://crowding.github.io/blog/2014/04/15/compiling-a-raspberry-pi-kernel-on-osx/"/>
    <updated>2014-04-15T00:53:35-07:00</updated>
    <id>http://crowding.github.io/blog/2014/04/15/compiling-a-raspberry-pi-kernel-on-osx</id>
    <content type="html"><![CDATA[<p>One thing leads to another and suddenly you want to compile a new Raspberry Pi kernel, and your most convenient host is a Mac.</p>

<p>I started with <a href="http://www.jaredwolff.com/blog/cross-compiling-on-mac-osx-for-raspberry-pi/">some existing notes</a> about this &mdash;  but I found they needed some tweaking and some updates have happened which make things a little easier.</p>

<p>I&rsquo;m using crosstool-ng from Homebrew on OS X 10.9.</p>

<h1>Instructions</h1>

<h2>Install packages</h2>

<p>These are the packages I needed from Homebrew.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew tap homebrew/versions
</span><span class='line'>brew install gcc48
</span><span class='line'>brew install crosstool-ng
</span><span class='line'>brew tap homebrew/dupes
</span><span class='line'>brew install grep
</span><span class='line'>brew install gettext
</span><span class='line'>brew link --force gettext
</span><span class='line'>brew install ncurses
</span><span class='line'>brew link --force ncurses</span></code></pre></td></tr></table></div></figure>


<p>Note that <code>link --force</code> is not a particularly nice thing to do, and will (e.g.) prevent you from reinstalling crosstool-ng without uninstalling gettext first. But it appears to be necessary, as eglibc build fails without it (and I don&rsquo;t understand if there&rsquo;s an option that will let me specity gettext&rsquo;s location to eglibc)</p>

<h2>Make crosstools use GNU grep</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod u+w /usr/local/Cellar/crosstool-ng/1.19.0/lib/ct-ng.1.19.0/paths.sh</span></code></pre></td></tr></table></div></figure>


<p>Edit <code>paths.sh</code>, changing the line about <code>grep</code> to read:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export grep="/usr/local/bin/ggrep"</span></code></pre></td></tr></table></div></figure>


<p>(Is there a user-level config way to do this w/o poking around in the Homebrew cellar?)</p>

<h2>Create disk images</h2>

<p>Crosstools needs case-sensitive file systems to work on, we&rsquo;ll create two images, one to compile in and one to host the binaries.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~
</span><span class='line'>mkdir xtools-images
</span><span class='line'>cd xtools-images
</span><span class='line'>hdiutil create -size 6g \
</span><span class='line'>   -attach -type SPARSE -fs 'Case-sensitive Journaled HFS+' \
</span><span class='line'>   -volname xtools-build-env xtools-build-env
</span><span class='line'>hdiutil create -size 500m \
</span><span class='line'>   -attach -type SPARSE -fs 'Case-sensitive Journaled HFS+' \
</span><span class='line'>   -volname xtools xtools</span></code></pre></td></tr></table></div></figure>


<h2>Set up crosstools-ng</h2>

<p>Thanks to <a href="https://github.com/Kentzo/armv6-rpi-linux-gnueabihf">Kentzo</a> there is a Raspberry Pi configuration already in <code>crosstools-ng</code> in Homebrew, and there only need minor adjustments.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /Volumes/xtools-build-env/
</span><span class='line'>ct-ng armv6-rpi-linux-gnueabi</span></code></pre></td></tr></table></div></figure>


<p>Now extract this repository onto the drive image. It contains a <code>.config</code> file and a couple of patches.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone homeGit/peter/raspberry-pi-osx-crosstools-config .</span></code></pre></td></tr></table></div></figure>


<p>Then inspect the configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ct-ng menuconfig</span></code></pre></td></tr></table></div></figure>


<p>Check that all the paths under &ldquo;Paths&rdquo; point to somewhere logical (mounted on your disk images)</p>

<p>For extra speed, set &ldquo;Paths::Build behavior::number of parallel jobs&rdquo; to twice your number of cores. This also means you will need to also up the <code>ulimit</code> before building. (If there are weird errors about no rules to make targets related to language localization, you probably forgot to do this.) So now do</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ulimit -n 1024
</span><span class='line'>ct-ng build</span></code></pre></td></tr></table></div></figure>


<p>Hopefully this will work.</p>

<h2>Test the compiler</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat &gt; test.c
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>int main() { printf("Hello, world!\n"); return 0; }</span></code></pre></td></tr></table></div></figure>


<p>(press ctrl-d to finish)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Volumes/xtools/armv6-rpi-linux-gnueabi/bin/armv6-rpi-linux-gnueabi-gcc -o test test.c</span></code></pre></td></tr></table></div></figure>


<p>Copy <code>test</code> over to your RPi and try running it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>scp test pi@raspberrypi.local:
</span><span class='line'>ssh pi@raspberrypi.local /home/pi/test</span></code></pre></td></tr></table></div></figure>


<h1>Compiling a Kernel</h1>

<p>Well this is what I signed up for.</p>

<p>I wanted to build the kernel described <a href="https://github.com/petli/linux/tree/rpi-3.10-usb-sound-backport">here</a>.</p>

<p>I&rsquo;m cribbing from <a href="http://akanto.wordpress.com/2012/09/25/cross-compiling-kernel-for-raspberry-pi-on-fedora-17-part-1/">these</a> notes.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /Volumes/xtools-build-env/
</span><span class='line'>git clone https://github.com/petli/linux.git -b rpi-3.10-usb-sound-backport</span></code></pre></td></tr></table></div></figure>


<p>Copy the existing config.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>scp pi@raspberrypi.local:/proc/config.gz ./linux-config.gz
</span><span class='line'>gunzip linux-config.gz
</span><span class='line'>cp linux-config linux/.config</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=arm CROSS_COMPILE=/Volumes/xtools/armv6-rpi-linux-gnueabi/bin/armv6-rpi-linux-gnueabi- oldconfig</span></code></pre></td></tr></table></div></figure>


<p><code>menuconfig</code> doersn&rsquo;t work for me because of some <code>ncurses</code> problem but there is <code>make nconfig</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=arm CROSS_COMPILE=/Volumes/xtools/armv6-rpi-linux-gnueabi/bin/armv6-rpi-linux-gnueabi- nconfig</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=arm CROSS_COMPILE=/Volumes/xtools/armv6-rpi-linux-gnueabi/bin/armv6-rpi-linux-gnueabi- nconfig</span></code></pre></td></tr></table></div></figure>


<p>Now it is complaining about lack of &ldquo;elf.h&rdquo; Where is it looking for elf.h?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo cp ../elf.h ../elftypes.h /usr/include
</span><span class='line'> 
</span><span class='line'>brew install libelf
</span><span class='line'>sudo ln -s /usr/local/include/libelf /usr/include/libelf</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and some other advice from the internet, which didn&rsquo;t work either. It&rsquo;s not the &lsquo;echo&rsquo; problem, as that&rsquo;s been long fixed.</p>

<h1>Giving up threshold reached</h1>

<p>&hellip;. oh but adjusting Linux enough to compile in an OSX environment is going to be bad. gonna investigate just installing an Ubuntu VM under VirtualBox and compiling there</p>

<p>honestly a kernel compile on the Pi itself would have finished by now</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiling a Raspberry Pi Kernel on Osx]]></title>
    <link href="http://crowding.github.io/blog/2014/04/15/compiling-a-raspberry-pi-kernel-on-osx/"/>
    <updated>2014-04-15T00:00:00-07:00</updated>
    <id>http://crowding.github.io/blog/2014/04/15/compiling-a-raspberry-pi-kernel-on-osx</id>
    <content type="html"><![CDATA[<table>
<tbody>
<tr class="odd">
<td align="left">layout: post</td>
</tr>
<tr class="even">
<td align="left">title: &quot;(not) Compiling a Raspberry Pi kernel on OSX&quot;</td>
</tr>
<tr class="odd">
<td align="left">date: 2014-04-15 00:53:35 -0700</td>
</tr>
<tr class="even">
<td align="left">comments: true</td>
</tr>
<tr class="odd">
<td align="left">categories: technote failure</td>
</tr>
</tbody>
</table>
<p>One thing leads to another and suddenly you want to compile a new Raspberry Pi kernel, and your most convenient host is a Mac.</p>
<p>I started with <a href="http://www.jaredwolff.com/blog/cross-compiling-on-mac-osx-for-raspberry-pi/">some existing notes</a> about this &#8211; but I found they needed some tweaking and some updates have happened which make things a little easier.</p>
<p>I&#8217;m using crosstool-ng from Homebrew on OS X 10.9.</p>
<h1 id="instructions">Instructions</h1>
<h2 id="install-packages">Install packages</h2>
<p>These are the packages I needed from Homebrew.</p>
<pre><code>brew tap homebrew/versions
brew install gcc48
brew install crosstool-ng
brew tap homebrew/dupes
brew install grep
brew install gettext
brew link --force gettext
brew install ncurses
brew link --force ncurses</code></pre>
<p>Note that <code>link --force</code> is not a particularly nice thing to do, and will (e.g.) prevent you from reinstalling crosstool-ng without uninstalling gettext first. But it appears to be necessary, as eglibc build fails without it (and I don&#8217;t understand if there&#8217;s an option that will let me specity gettext&#8217;s location to eglibc)</p>
<h2 id="make-crosstools-use-gnu-grep">Make crosstools use GNU grep</h2>
<pre><code>chmod u+w /usr/local/Cellar/crosstool-ng/1.19.0/lib/ct-ng.1.19.0/paths.sh</code></pre>
<p>Edit <code>paths.sh</code>, changing the line about <code>grep</code> to read:</p>
<pre><code>export grep=&quot;/usr/local/bin/ggrep&quot;</code></pre>
<p>(Is there a user-level config way to do this w/o poking around in the Homebrew cellar?)</p>
<h2 id="create-disk-images">Create disk images</h2>
<p>Crosstools needs case-sensitive file systems to work on, we&#8217;ll create two images, one to compile in and one to host the binaries.</p>
<pre><code>cd ~
mkdir xtools-images
cd xtools-images
hdiutil create -size 6g \
   -attach -type SPARSE -fs &#39;Case-sensitive Journaled HFS+&#39; \
   -volname xtools-build-env xtools-build-env
hdiutil create -size 500m \
   -attach -type SPARSE -fs &#39;Case-sensitive Journaled HFS+&#39; \
   -volname xtools xtools</code></pre>
<h2 id="set-up-crosstools-ng">Set up crosstools-ng</h2>
<p>Thanks to <a href="https://github.com/Kentzo/armv6-rpi-linux-gnueabihf">Kentzo</a> there is a Raspberry Pi configuration already in <code>crosstools-ng</code> in Homebrew, and there only need minor adjustments.</p>
<pre><code>cd /Volumes/xtools-build-env/
ct-ng armv6-rpi-linux-gnueabi</code></pre>
<p>Now extract this repository onto the drive image. It contains a <code>.config</code> file and a couple of patches.</p>
<pre><code>git clone homeGit/peter/raspberry-pi-osx-crosstools-config .</code></pre>
<p>Then inspect the configuration:</p>
<pre><code>ct-ng menuconfig</code></pre>
<p>Check that all the paths under &quot;Paths&quot; point to somewhere logical (mounted on your disk images)</p>
<p>For extra speed, set &quot;Paths::Build behavior::number of parallel jobs&quot; to twice your number of cores. This also means you will need to also up the <code>ulimit</code> before building. (If there are weird errors about no rules to make targets related to language localization, you probably forgot to do this.) So now do</p>
<pre><code>ulimit -n 1024
ct-ng build</code></pre>
<p>Hopefully this will work.</p>
<h2 id="test-the-compiler">Test the compiler</h2>
<pre><code>cat &gt; test.c
#include &lt;stdio.h&gt;
int main() { printf(&quot;Hello, world!\n&quot;); return 0; }</code></pre>
<p>(press ctrl-d to finish)</p>
<pre><code>/Volumes/xtools/armv6-rpi-linux-gnueabi/bin/armv6-rpi-linux-gnueabi-gcc -o test test.c</code></pre>
<p>Copy <code>test</code> over to your RPi and try running it.</p>
<pre><code>scp test pi@raspberrypi.local:
ssh pi@raspberrypi.local /home/pi/test</code></pre>
<h1 id="compiling-a-kernel">Compiling a Kernel</h1>
<p>Well this is what I signed up for.</p>
<p>I wanted to build the kernel described <a href="https://github.com/petli/linux/tree/rpi-3.10-usb-sound-backport">here</a>.</p>
<p>I&#8217;m cribbing from <a href="http://akanto.wordpress.com/2012/09/25/cross-compiling-kernel-for-raspberry-pi-on-fedora-17-part-1/">these</a> notes.</p>
<pre><code>cd /Volumes/xtools-build-env/
git clone https://github.com/petli/linux.git -b rpi-3.10-usb-sound-backport</code></pre>
<p>Copy the existing config.</p>
<pre><code>scp pi@raspberrypi.local:/proc/config.gz ./linux-config.gz
gunzip linux-config.gz
cp linux-config linux/.config</code></pre>
<pre><code>make ARCH=arm CROSS_COMPILE=/Volumes/xtools/armv6-rpi-linux-gnueabi/bin/armv6-rpi-linux-gnueabi- oldconfig</code></pre>
<p><code>menuconfig</code> doersn&#8217;t work for me because of some <code>ncurses</code> problem but there is <code>make nconfig</code></p>
<pre><code>make ARCH=arm CROSS_COMPILE=/Volumes/xtools/armv6-rpi-linux-gnueabi/bin/armv6-rpi-linux-gnueabi- nconfig</code></pre>
<pre><code>make ARCH=arm CROSS_COMPILE=/Volumes/xtools/armv6-rpi-linux-gnueabi/bin/armv6-rpi-linux-gnueabi- nconfig</code></pre>
<p>Now it is complaining about lack of &quot;elf.h&quot; Where is it looking for elf.h?</p>
<pre><code>sudo cp ../elf.h ../elftypes.h /usr/include
 
brew install libelf
sudo ln -s /usr/local/include/libelf /usr/include/libelf</code></pre>
<p>&#8230; and some other advice from the internet, which didn&#8217;t work either. It&#8217;s not the &#8216;echo&#8217; problem, as that&#8217;s been long fixed.</p>
<h1 id="giving-up-threshold-reached">Giving up threshold reached</h1>
<p>&#8230;. oh but adjusting Linux enough to compile in an OSX environment is going to be bad. gonna investigate just installing an Ubuntu VM under VirtualBox and compiling there</p>
<p>honestly a kernel compile on the Pi itself would have finished by now</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Best Emacs on OS X]]></title>
    <link href="http://crowding.github.io/blog/2014/04/06/the-best-emacs/"/>
    <updated>2014-04-06T12:40:21-07:00</updated>
    <id>http://crowding.github.io/blog/2014/04/06/the-best-emacs</id>
    <content type="html"><![CDATA[<p>My favorite version of Emacs on OS X is the <a href="">branch by Yamamoto Mitsuharu</a>. It has improved font rendering, better color calibration and a real full screen mode.</p>

<p>Installation is easy using Homebrew:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew tap railwaycat/emacsmacport
</span><span class='line'>brew install emacs-mac
</span><span class='line'>brew linkapps emacs-mac</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress]]></title>
    <link href="http://crowding.github.io/blog/2014/04/01/octopress/"/>
    <updated>2014-04-01T13:18:28-07:00</updated>
    <id>http://crowding.github.io/blog/2014/04/01/octopress</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabling Subpixel Rendering on Mac OS]]></title>
    <link href="http://crowding.github.io/blog/2014/03/29/enabling-subpixel/"/>
    <updated>2014-03-29T14:12:53-07:00</updated>
    <id>http://crowding.github.io/blog/2014/03/29/enabling-subpixel</id>
    <content type="html"><![CDATA[<p>I have one of those generic Korean 27&#8221; LCD monitors. It&rsquo;s nice, but Mac OS doesn&rsquo;t recognize it enough to enable subpixel font rendering. Here&rsquo;s how to fix it on OS X 10.6.8, via <a href="http://hints.macworld.com/article.php?story=20090828224632809">MaxOSXHints</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defaults -currentHost write -globalDomain AppleFontSmoothing -int 2</span></code></pre></td></tr></table></div></figure>


<p>Especially with a nice font like Source Code Pro, it makes a perceptible difference in clarity.</p>

<p>Related: <a href="http://www.rastertragedy.com/">A longer web page about font rendering than you probably want to read.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Version Controlled Home Directory With Vcsh]]></title>
    <link href="http://crowding.github.io/blog/2014/03/29/vc-home/"/>
    <updated>2014-03-29T13:25:03-07:00</updated>
    <id>http://crowding.github.io/blog/2014/03/29/vc-home</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been keeping all my .dotfiles in a Git repository. Since I&rsquo;m keeping <em>all</em> of them, it&rsquo;s become a big mess. I also had little success with maintaining diverging branches to work on different computers (e.g. Mac vs. Linux, Emacs23 versus Emacs24) while keeping the common. you-d think that exchanging merge operations between branches would work, but actually you need to be constantly rebasing, and Git doesn&rsquo;t have any way of keeping track of what was a rebase of what (which is half the problem with Git) and it&rsquo;s a mess.</p>

<p>I still wonder if maybe darcs would be a better model for VCS home &mdash; it would certainly seem better to the always-rebase school of moving branches in sync.</p>

<p>However, <a href="https://github.com/RichiH/vcsh">vcsh</a> seems to approach at least one aspect of the problem, whcih is to keep different pieces of your mess of config files under differetn headings. So let&rsquo;s see about starting to use that.</p>

<p>Download: It&rsquo;s in Homebrew and Debian, so just brew or apt-get as appropriate.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/RichiH/vcsh.git</span></code></pre></td></tr></table></div></figure>


<p>First question is does it support tracking things scattered around <code>/etc</code> and so on? It would be nice to have backups for &ldquo;software configurations&rdquo; set up on glibal servers too.</p>

<p>To start with, I went to <a href="hosting_git_on_your_user_account">gitolite</a> and added some space for wild config repositories:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repo configs/.*
</span><span class='line'>    C     = peter
</span><span class='line'>    RW+D  = peter
</span><span class='line'>
</span><span class='line'>repo gobal_configs/.*
</span><span class='line'>    C     = peter
</span><span class='line'>    RW+D  = peter</span></code></pre></td></tr></table></div></figure>


<p>The tutorial for <code>vcsh</code> is located at <code>/usr/doc/vcsh/README.md.gz</code>. For my home directory I started with the &ldquo;template&rdquo; approach, clonign the example MR config to my own server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vcsh clone git://github.com/RichiH/vcsh_mr_template.git mr
</span><span class='line'>vcsh enter mr
</span><span class='line'>git remote rm origin
</span><span class='line'>git remote add origin homeGit:configs/mr
</span><span class='line'>git fetch
</span><span class='line'>git push origin master
</span><span class='line'>git branch --set-upstream master origin/master
</span><span class='line'>exit</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ll start by making a repo for my my SSH public/authorized keys files. I recently decided not to share private keys between computers and regenerated a new private key on each, so this is a good opportunity to keep the authorized keys straight.</p>

<p>So, as far as I can tell, this is how you add a new config repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vcsh init ssh
</span><span class='line'>vcsh ssh add .ssh/authorized_keys .ssh/config .ssh/*.pub
</span><span class='line'>vcsh ssh commit
</span><span class='line'>vcsh run ssh git remote add origin homeGit:configs/ssh
</span><span class='line'>vcsh ssh push origin master
</span><span class='line'>cd .config/mr/available.d/
</span><span class='line'>cp mr.vcsh ssh.vcsh
</span><span class='line'>emacs ssh.vcsh #change the URL
</span><span class='line'>cp ssh.vcsh ../config.d
</span><span class='line'>vcsh mr add ssh.vcsh ../config.d/ssh.vcsh
</span><span class='line'>vcsh mr commit
</span><span class='line'>vcsh mr push</span></code></pre></td></tr></table></div></figure>


<p>Wow, really that involved? Twelve damn commands, leaving off one of which does weird things? Color me dubious about this scheme. And there are eight billion untracked files every time making it impossible to see files you don&rsquo;t have under control but should &mdash; can all repos share a .gitignore or what?</p>

<p>Why doesn&rsquo;t &ldquo;vcsh init ssh&rdquo; do like 90% of this?</p>

<p>This is supposed to be easier than symlinking scripts?</p>

<p>Anyhow, the capstone that pushed me from &ldquo;dubious&rdquo; to &ldquo;kill it with fire&rdquo; was this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vcsh mr commit -m "Added ssh to config dir"
</span><span class='line'>error: pathspec 'ssh' did not match any file(s) known to git.
</span><span class='line'>error: pathspec 'to' did not match any file(s) known to git.
</span><span class='line'>error: pathspec 'config' did not match any file(s) known to git.
</span><span class='line'>error: pathspec 'dir' did not match any file(s) known to git.</span></code></pre></td></tr></table></div></figure>


<p>COMMAND LINE ARGUMENTS.
THEY CAN HAVE SPACES IN THEM.
NO, REALLY, <em>THEY CAN.</em>
JUST BECAUSE YOU WRITE YOUR STUPID THING IN SHELL IS NO EXCUSE FOR THIS SHIT.</p>

<p>Really, tearing apart arguments that were quoted perfectly well is fucking unacceptable for any kind of UNIX utility written after the &lsquo;80s.</p>

<p>Bye now.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh homeGit D unlock configs/mr
</span><span class='line'>ssh homeGit D unlock configs/ssh
</span><span class='line'>ssh homeGit D rm configs/mr
</span><span class='line'>ssh homeGit D rm configs/ssh
</span><span class='line'>sudo apt-get remove mr vcsh
</span><span class='line'>rm -rf .config/mr .config/vcsh .mrconfig</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://crowding.github.io/blog/2014/03/24/hello-world/"/>
    <updated>2014-03-24T12:23:11-07:00</updated>
    <id>http://crowding.github.io/blog/2014/03/24/hello-world</id>
    <content type="html"><![CDATA[<p>Octopress. A blogging framework for people who want to do it the hard way?</p>

<p>Hello Octopress.</p>

<p>I saw an an interesting post about <a href="http://www.railsonmaui.com/blog/2014/03/05/octopress-setup-with-github-and-org-mode-v2/">driving Octopress from Org-mode</a>, but I&rsquo;m not sure about diving down the Org-mode rabbit hole yet. So&hellip; making a web page with a static site generator with Ruby? Maybe it will turn out better than my attempts to do so with Perl in the late &lsquo;90s.</p>

<p>The thing is that I&rsquo;m not particularly interested in my notes being &lsquo;a voice&rsquo; on the internet or whatever, but it would be nice if they were Google-visible.</p>
]]></content>
  </entry>
  
</feed>
